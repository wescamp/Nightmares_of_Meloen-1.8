#textdomain wesnoth-Nightmares_of_Meloen

# This macro will swap Initial players castle with factions flavoured variant and cover it in shroud to keep random advantage
# Sample usage for dwarfs :
# {NOM_SWAP_INITIAL_CASTLE Cud Kud "Dwarvish Fighter"}
# Macro needs to be placed inside [era] tag to have any impact

#define NOM_SWAP_INITIAL_CASTLE FACTION_CASTLE_TILE FACTION_KEEP_TILE FACTION_UNIQUE_RECRUIT
    [event]
        name="prestart"
        # It can be safely assumed there are no more than 9 sides in a game. There is no way to query number of
        # sides or at which numbers are they placed, so all nine possibilities will be queried using [store_starting_location].
        # If ever a need arises to expand this limit change value of variable below.
        {VARIABLE macro.side_limit 9}

        {VARIABLE iter.i 1}
        [while]
            [variable]
                name="iter.i"
                less_than_equal_to=$macro.side_limit
            [/variable]
            [do]
                [store_starting_location]
                    side=$iter.i
                    variable="temp.side_starting_point[$iter.i]"
                [/store_starting_location]
                [store_side]
                    side=$iter.i
                    variable="temp.side_data[$iter.i]"
                [/store_side]
                {VARIABLE_OP iter.i add 1}
            [/do]
        [/while]

        # Now the tile substitution can start. Since simple recursion is not possible in WML macro uses iterated equivalent
        # to walk over and test candidate tiles. each side is tested for being a correct faction.

        {VARIABLE iter.i 1}
        [while]
            [variable]
                name="iter.i"
                less_than_equal_to=$macro.side_limit
            [/variable]
            # For each potential side
            [do]
                # Check if it's of correct faction
                [if]
                    [variable]
                        name="temp.side_data[$iter.i].recruit"
                        contains={FACTION_UNIQUE_RECRUIT}
                    [/variable]
                    # If yes
                    [then]
                        # Copy starting point details into a temporary array
                        {VARIABLE temp.terrain_to_do[0].x $temp.side_starting_point[$iter.i].x}
                        {VARIABLE temp.terrain_to_do[0].y $temp.side_starting_point[$iter.i].y}
                        {VARIABLE temp.terrain_to_do[0].terrain $temp.side_starting_point[$iter.i].terrain}
                        # Iterate over the array while not empty
                        [while]
                            [variable]
                                name=temp.terrain_to_do.length
                                greater_than=0
                            [/variable]
                            [do]
                                {VARIABLE iter.j 0}
                                # Replace all castle and keep tiles with correct flavour
                                [while]
                                    [variable]
                                        name="iter.j"
                                        less_than=$temp.terrain_to_do.length
                                    [/variable]
                                    [do]
                                        # Swap castle
                                        [if]
                                            [variable]
                                                name="temp.terrain_to_do[$iter.j].terrain"
                                                contains="C"
                                            [/variable]
                                            [then]
                                                [terrain]
                                                    x=$temp.terrain_to_do[$iter.j].x
                                                    y=$temp.terrain_to_do[$iter.j].y
                                                    terrain={FACTION_CASTLE_TILE}
                                                [/terrain]
                                            [/then]
                                        [/if]
                                        # Swap keep. [else] can't be used because starting position can be non-castle
                                        [if]
                                            [variable]
                                                name="temp.terrain_to_do[$iter.j].terrain"
                                                contains="K"
                                            [/variable]
                                            [then]
                                                [terrain]
                                                    x=$temp.terrain_to_do[$iter.j].x
                                                    y=$temp.terrain_to_do[$iter.j].y
                                                    terrain={FACTION_KEEP_TILE}
                                                [/terrain]
                                            [/then]
                                        [/if]
                                        {VARIABLE_OP iter.j add 1}
                                    [/do]
                                [/while]
                                # Store wrongly-flavored keep and castle tiles adjacent to these just swaped for next pass
                                [store_locations]
                                    terrain="K*, C*"
                                    [and]
                                        find_in=temp.terrain_to_do
                                        radius=1
                                    [/and]
                                    [not]
                                        find_in=temp.terrain_to_do
                                    [/not]
                                    [not]
                                        terrain={FACTION_CASTLE_TILE},{FACTION_KEEP_TILE}
                                    [/not]
                                    variable="temp.terrain_to_do"
                                [/store_locations]
                            [/do]
                        [/while]
                    [/then]
                [/if]
                {VARIABLE_OP iter.i add 1}
            [/do]
        [/while]

        {CLEAR_VARIABLE temp}
        {CLEAR_VARIABLE iter}
        {CLEAR_VARIABLE macro}
    [/event]
#enddef
